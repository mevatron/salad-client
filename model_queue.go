/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.5
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Queue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Queue{}

// Queue Represents a queue.
type Queue struct {
	// The queue identifier. This is automatically generated and assigned when the queue is created.
	Id string `json:"id"`
	// The queue name. This must be unique within the project.
	Name string `json:"name" validate:"regexp=^[a-z][a-z0-9-]{0,61}[a-z0-9]$"`
	// The display name. This may be used as a more human-readable name.
	DisplayName string `json:"display_name" validate:"regexp=^[ ,-.0-9A-Za-z]+$"`
	// The description. This may be used as a space for notes or other information about the queue.
	Description     NullableString   `json:"description,omitempty"`
	ContainerGroups []ContainerGroup `json:"container_groups"`
	// The date and time the queue was created.
	CreateTime time.Time `json:"create_time"`
	// The date and time the queue was last updated.
	UpdateTime time.Time `json:"update_time"`
}

type _Queue Queue

// NewQueue instantiates a new Queue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueue(id string, name string, displayName string, containerGroups []ContainerGroup, createTime time.Time, updateTime time.Time) *Queue {
	this := Queue{}
	this.Id = id
	this.Name = name
	this.DisplayName = displayName
	this.ContainerGroups = containerGroups
	this.CreateTime = createTime
	this.UpdateTime = updateTime
	return &this
}

// NewQueueWithDefaults instantiates a new Queue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueueWithDefaults() *Queue {
	this := Queue{}
	return &this
}

// GetId returns the Id field value
func (o *Queue) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Queue) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Queue) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Queue) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Queue) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Queue) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value
func (o *Queue) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *Queue) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *Queue) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Queue) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Queue) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Queue) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Queue) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Queue) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Queue) UnsetDescription() {
	o.Description.Unset()
}

// GetContainerGroups returns the ContainerGroups field value
func (o *Queue) GetContainerGroups() []ContainerGroup {
	if o == nil {
		var ret []ContainerGroup
		return ret
	}

	return o.ContainerGroups
}

// GetContainerGroupsOk returns a tuple with the ContainerGroups field value
// and a boolean to check if the value has been set.
func (o *Queue) GetContainerGroupsOk() ([]ContainerGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContainerGroups, true
}

// SetContainerGroups sets field value
func (o *Queue) SetContainerGroups(v []ContainerGroup) {
	o.ContainerGroups = v
}

// GetCreateTime returns the CreateTime field value
func (o *Queue) GetCreateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value
// and a boolean to check if the value has been set.
func (o *Queue) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreateTime, true
}

// SetCreateTime sets field value
func (o *Queue) SetCreateTime(v time.Time) {
	o.CreateTime = v
}

// GetUpdateTime returns the UpdateTime field value
func (o *Queue) GetUpdateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value
// and a boolean to check if the value has been set.
func (o *Queue) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateTime, true
}

// SetUpdateTime sets field value
func (o *Queue) SetUpdateTime(v time.Time) {
	o.UpdateTime = v
}

func (o Queue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Queue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["display_name"] = o.DisplayName
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["container_groups"] = o.ContainerGroups
	toSerialize["create_time"] = o.CreateTime
	toSerialize["update_time"] = o.UpdateTime
	return toSerialize, nil
}

func (o *Queue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"display_name",
		"container_groups",
		"create_time",
		"update_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueue := _Queue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueue)

	if err != nil {
		return err
	}

	*o = Queue(varQueue)

	return err
}

type NullableQueue struct {
	value *Queue
	isSet bool
}

func (v NullableQueue) Get() *Queue {
	return v.value
}

func (v *NullableQueue) Set(val *Queue) {
	v.value = val
	v.isSet = true
}

func (v NullableQueue) IsSet() bool {
	return v.isSet
}

func (v *NullableQueue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueue(val *Queue) *NullableQueue {
	return &NullableQueue{value: val, isSet: true}
}

func (v NullableQueue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
