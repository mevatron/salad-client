/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.5
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
)

// checks if the ContainerLogging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerLogging{}

// ContainerLogging struct for ContainerLogging
type ContainerLogging struct {
	Axiom    NullableContainerLoggingAxiom    `json:"axiom,omitempty"`
	Datadog  NullableContainerLoggingDatadog  `json:"datadog,omitempty"`
	NewRelic NullableContainerLoggingNewRelic `json:"new_relic,omitempty"`
	Splunk   NullableContainerLoggingSplunk   `json:"splunk,omitempty"`
	Tcp      NullableContainerLoggingTcp      `json:"tcp,omitempty"`
	Http     NullableContainerLoggingHttp     `json:"http,omitempty"`
}

// NewContainerLogging instantiates a new ContainerLogging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerLogging() *ContainerLogging {
	this := ContainerLogging{}
	return &this
}

// NewContainerLoggingWithDefaults instantiates a new ContainerLogging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerLoggingWithDefaults() *ContainerLogging {
	this := ContainerLogging{}
	return &this
}

// GetAxiom returns the Axiom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerLogging) GetAxiom() ContainerLoggingAxiom {
	if o == nil || IsNil(o.Axiom.Get()) {
		var ret ContainerLoggingAxiom
		return ret
	}
	return *o.Axiom.Get()
}

// GetAxiomOk returns a tuple with the Axiom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerLogging) GetAxiomOk() (*ContainerLoggingAxiom, bool) {
	if o == nil {
		return nil, false
	}
	return o.Axiom.Get(), o.Axiom.IsSet()
}

// HasAxiom returns a boolean if a field has been set.
func (o *ContainerLogging) HasAxiom() bool {
	if o != nil && o.Axiom.IsSet() {
		return true
	}

	return false
}

// SetAxiom gets a reference to the given NullableContainerLoggingAxiom and assigns it to the Axiom field.
func (o *ContainerLogging) SetAxiom(v ContainerLoggingAxiom) {
	o.Axiom.Set(&v)
}

// SetAxiomNil sets the value for Axiom to be an explicit nil
func (o *ContainerLogging) SetAxiomNil() {
	o.Axiom.Set(nil)
}

// UnsetAxiom ensures that no value is present for Axiom, not even an explicit nil
func (o *ContainerLogging) UnsetAxiom() {
	o.Axiom.Unset()
}

// GetDatadog returns the Datadog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerLogging) GetDatadog() ContainerLoggingDatadog {
	if o == nil || IsNil(o.Datadog.Get()) {
		var ret ContainerLoggingDatadog
		return ret
	}
	return *o.Datadog.Get()
}

// GetDatadogOk returns a tuple with the Datadog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerLogging) GetDatadogOk() (*ContainerLoggingDatadog, bool) {
	if o == nil {
		return nil, false
	}
	return o.Datadog.Get(), o.Datadog.IsSet()
}

// HasDatadog returns a boolean if a field has been set.
func (o *ContainerLogging) HasDatadog() bool {
	if o != nil && o.Datadog.IsSet() {
		return true
	}

	return false
}

// SetDatadog gets a reference to the given NullableContainerLoggingDatadog and assigns it to the Datadog field.
func (o *ContainerLogging) SetDatadog(v ContainerLoggingDatadog) {
	o.Datadog.Set(&v)
}

// SetDatadogNil sets the value for Datadog to be an explicit nil
func (o *ContainerLogging) SetDatadogNil() {
	o.Datadog.Set(nil)
}

// UnsetDatadog ensures that no value is present for Datadog, not even an explicit nil
func (o *ContainerLogging) UnsetDatadog() {
	o.Datadog.Unset()
}

// GetNewRelic returns the NewRelic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerLogging) GetNewRelic() ContainerLoggingNewRelic {
	if o == nil || IsNil(o.NewRelic.Get()) {
		var ret ContainerLoggingNewRelic
		return ret
	}
	return *o.NewRelic.Get()
}

// GetNewRelicOk returns a tuple with the NewRelic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerLogging) GetNewRelicOk() (*ContainerLoggingNewRelic, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewRelic.Get(), o.NewRelic.IsSet()
}

// HasNewRelic returns a boolean if a field has been set.
func (o *ContainerLogging) HasNewRelic() bool {
	if o != nil && o.NewRelic.IsSet() {
		return true
	}

	return false
}

// SetNewRelic gets a reference to the given NullableContainerLoggingNewRelic and assigns it to the NewRelic field.
func (o *ContainerLogging) SetNewRelic(v ContainerLoggingNewRelic) {
	o.NewRelic.Set(&v)
}

// SetNewRelicNil sets the value for NewRelic to be an explicit nil
func (o *ContainerLogging) SetNewRelicNil() {
	o.NewRelic.Set(nil)
}

// UnsetNewRelic ensures that no value is present for NewRelic, not even an explicit nil
func (o *ContainerLogging) UnsetNewRelic() {
	o.NewRelic.Unset()
}

// GetSplunk returns the Splunk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerLogging) GetSplunk() ContainerLoggingSplunk {
	if o == nil || IsNil(o.Splunk.Get()) {
		var ret ContainerLoggingSplunk
		return ret
	}
	return *o.Splunk.Get()
}

// GetSplunkOk returns a tuple with the Splunk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerLogging) GetSplunkOk() (*ContainerLoggingSplunk, bool) {
	if o == nil {
		return nil, false
	}
	return o.Splunk.Get(), o.Splunk.IsSet()
}

// HasSplunk returns a boolean if a field has been set.
func (o *ContainerLogging) HasSplunk() bool {
	if o != nil && o.Splunk.IsSet() {
		return true
	}

	return false
}

// SetSplunk gets a reference to the given NullableContainerLoggingSplunk and assigns it to the Splunk field.
func (o *ContainerLogging) SetSplunk(v ContainerLoggingSplunk) {
	o.Splunk.Set(&v)
}

// SetSplunkNil sets the value for Splunk to be an explicit nil
func (o *ContainerLogging) SetSplunkNil() {
	o.Splunk.Set(nil)
}

// UnsetSplunk ensures that no value is present for Splunk, not even an explicit nil
func (o *ContainerLogging) UnsetSplunk() {
	o.Splunk.Unset()
}

// GetTcp returns the Tcp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerLogging) GetTcp() ContainerLoggingTcp {
	if o == nil || IsNil(o.Tcp.Get()) {
		var ret ContainerLoggingTcp
		return ret
	}
	return *o.Tcp.Get()
}

// GetTcpOk returns a tuple with the Tcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerLogging) GetTcpOk() (*ContainerLoggingTcp, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tcp.Get(), o.Tcp.IsSet()
}

// HasTcp returns a boolean if a field has been set.
func (o *ContainerLogging) HasTcp() bool {
	if o != nil && o.Tcp.IsSet() {
		return true
	}

	return false
}

// SetTcp gets a reference to the given NullableContainerLoggingTcp and assigns it to the Tcp field.
func (o *ContainerLogging) SetTcp(v ContainerLoggingTcp) {
	o.Tcp.Set(&v)
}

// SetTcpNil sets the value for Tcp to be an explicit nil
func (o *ContainerLogging) SetTcpNil() {
	o.Tcp.Set(nil)
}

// UnsetTcp ensures that no value is present for Tcp, not even an explicit nil
func (o *ContainerLogging) UnsetTcp() {
	o.Tcp.Unset()
}

// GetHttp returns the Http field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerLogging) GetHttp() ContainerLoggingHttp {
	if o == nil || IsNil(o.Http.Get()) {
		var ret ContainerLoggingHttp
		return ret
	}
	return *o.Http.Get()
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerLogging) GetHttpOk() (*ContainerLoggingHttp, bool) {
	if o == nil {
		return nil, false
	}
	return o.Http.Get(), o.Http.IsSet()
}

// HasHttp returns a boolean if a field has been set.
func (o *ContainerLogging) HasHttp() bool {
	if o != nil && o.Http.IsSet() {
		return true
	}

	return false
}

// SetHttp gets a reference to the given NullableContainerLoggingHttp and assigns it to the Http field.
func (o *ContainerLogging) SetHttp(v ContainerLoggingHttp) {
	o.Http.Set(&v)
}

// SetHttpNil sets the value for Http to be an explicit nil
func (o *ContainerLogging) SetHttpNil() {
	o.Http.Set(nil)
}

// UnsetHttp ensures that no value is present for Http, not even an explicit nil
func (o *ContainerLogging) UnsetHttp() {
	o.Http.Unset()
}

func (o ContainerLogging) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerLogging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Axiom.IsSet() {
		toSerialize["axiom"] = o.Axiom.Get()
	}
	if o.Datadog.IsSet() {
		toSerialize["datadog"] = o.Datadog.Get()
	}
	if o.NewRelic.IsSet() {
		toSerialize["new_relic"] = o.NewRelic.Get()
	}
	if o.Splunk.IsSet() {
		toSerialize["splunk"] = o.Splunk.Get()
	}
	if o.Tcp.IsSet() {
		toSerialize["tcp"] = o.Tcp.Get()
	}
	if o.Http.IsSet() {
		toSerialize["http"] = o.Http.Get()
	}
	return toSerialize, nil
}

type NullableContainerLogging struct {
	value *ContainerLogging
	isSet bool
}

func (v NullableContainerLogging) Get() *ContainerLogging {
	return v.value
}

func (v *NullableContainerLogging) Set(val *ContainerLogging) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerLogging) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerLogging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerLogging(val *ContainerLogging) *NullableContainerLogging {
	return &NullableContainerLogging{value: val, isSet: true}
}

func (v NullableContainerLogging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerLogging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
