/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.5
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// QueuesAPIService QueuesAPI service
type QueuesAPIService service

type ApiCreateQueueRequest struct {
	ctx              context.Context
	ApiService       *QueuesAPIService
	organizationName string
	projectName      string
	createQueue      *CreateQueue
}

func (r ApiCreateQueueRequest) CreateQueue(createQueue CreateQueue) ApiCreateQueueRequest {
	r.createQueue = &createQueue
	return r
}

func (r ApiCreateQueueRequest) Execute() (*Queue, *http.Response, error) {
	return r.ApiService.CreateQueueExecute(r)
}

/*
CreateQueue Create Queue

Creates a new queue in the given project.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param organizationName Your organization name. This identifies the billing context for the API operation and represents a security boundary for SaladCloud resources. The organization must be created before using the API, and you must be a member of the organization.
	@param projectName Your project name. This represents a collection of related SaladCloud resources. The project must be created before using the API.
	@return ApiCreateQueueRequest
*/
func (a *QueuesAPIService) CreateQueue(ctx context.Context, organizationName string, projectName string) ApiCreateQueueRequest {
	return ApiCreateQueueRequest{
		ApiService:       a,
		ctx:              ctx,
		organizationName: organizationName,
		projectName:      projectName,
	}
}

// Execute executes the request
//
//	@return Queue
func (a *QueuesAPIService) CreateQueueExecute(r ApiCreateQueueRequest) (*Queue, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Queue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueuesAPIService.CreateQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/queues"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}
	if r.createQueue == nil {
		return localVarReturnValue, nil, reportError("createQueue is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createQueue
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		var v ProblemDetails
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateQueueJobRequest struct {
	ctx              context.Context
	ApiService       *QueuesAPIService
	organizationName string
	projectName      string
	queueName        string
	createQueueJob   *CreateQueueJob
}

func (r ApiCreateQueueJobRequest) CreateQueueJob(createQueueJob CreateQueueJob) ApiCreateQueueJobRequest {
	r.createQueueJob = &createQueueJob
	return r
}

func (r ApiCreateQueueJobRequest) Execute() (*QueueJob, *http.Response, error) {
	return r.ApiService.CreateQueueJobExecute(r)
}

/*
CreateQueueJob Create Job

Creates a new job

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param organizationName Your organization name. This identifies the billing context for the API operation and represents a security boundary for SaladCloud resources. The organization must be created before using the API, and you must be a member of the organization.
	@param projectName Your project name. This represents a collection of related SaladCloud resources. The project must be created before using the API.
	@param queueName The queue name.
	@return ApiCreateQueueJobRequest
*/
func (a *QueuesAPIService) CreateQueueJob(ctx context.Context, organizationName string, projectName string, queueName string) ApiCreateQueueJobRequest {
	return ApiCreateQueueJobRequest{
		ApiService:       a,
		ctx:              ctx,
		organizationName: organizationName,
		projectName:      projectName,
		queueName:        queueName,
	}
}

// Execute executes the request
//
//	@return QueueJob
func (a *QueuesAPIService) CreateQueueJobExecute(r ApiCreateQueueJobRequest) (*QueueJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *QueueJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueuesAPIService.CreateQueueJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/queues/{queue_name}/jobs"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queue_name"+"}", url.PathEscape(parameterValueToString(r.queueName, "queueName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.queueName) < 2 {
		return localVarReturnValue, nil, reportError("queueName must have at least 2 elements")
	}
	if strlen(r.queueName) > 63 {
		return localVarReturnValue, nil, reportError("queueName must have less than 63 elements")
	}
	if r.createQueueJob == nil {
		return localVarReturnValue, nil, reportError("createQueueJob is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createQueueJob
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		var v ProblemDetails
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteQueueRequest struct {
	ctx              context.Context
	ApiService       *QueuesAPIService
	organizationName string
	projectName      string
	queueName        string
}

func (r ApiDeleteQueueRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteQueueExecute(r)
}

/*
DeleteQueue Delete Queue

Deletes an existing queue in the given project.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param organizationName Your organization name. This identifies the billing context for the API operation and represents a security boundary for SaladCloud resources. The organization must be created before using the API, and you must be a member of the organization.
	@param projectName Your project name. This represents a collection of related SaladCloud resources. The project must be created before using the API.
	@param queueName The queue name.
	@return ApiDeleteQueueRequest
*/
func (a *QueuesAPIService) DeleteQueue(ctx context.Context, organizationName string, projectName string, queueName string) ApiDeleteQueueRequest {
	return ApiDeleteQueueRequest{
		ApiService:       a,
		ctx:              ctx,
		organizationName: organizationName,
		projectName:      projectName,
		queueName:        queueName,
	}
}

// Execute executes the request
func (a *QueuesAPIService) DeleteQueueExecute(r ApiDeleteQueueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueuesAPIService.DeleteQueue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/queues/{queue_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queue_name"+"}", url.PathEscape(parameterValueToString(r.queueName, "queueName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.queueName) < 2 {
		return nil, reportError("queueName must have at least 2 elements")
	}
	if strlen(r.queueName) > 63 {
		return nil, reportError("queueName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		var v ProblemDetails
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteQueueJobRequest struct {
	ctx              context.Context
	ApiService       *QueuesAPIService
	organizationName string
	projectName      string
	queueName        string
	queueJobId       string
}

func (r ApiDeleteQueueJobRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteQueueJobExecute(r)
}

/*
DeleteQueueJob Delete Job

Cancels a job in a queue

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param organizationName Your organization name. This identifies the billing context for the API operation and represents a security boundary for SaladCloud resources. The organization must be created before using the API, and you must be a member of the organization.
	@param projectName Your project name. This represents a collection of related SaladCloud resources. The project must be created before using the API.
	@param queueName The queue name.
	@param queueJobId The job identifier. This is automatically generated and assigned when the job is created.
	@return ApiDeleteQueueJobRequest
*/
func (a *QueuesAPIService) DeleteQueueJob(ctx context.Context, organizationName string, projectName string, queueName string, queueJobId string) ApiDeleteQueueJobRequest {
	return ApiDeleteQueueJobRequest{
		ApiService:       a,
		ctx:              ctx,
		organizationName: organizationName,
		projectName:      projectName,
		queueName:        queueName,
		queueJobId:       queueJobId,
	}
}

// Execute executes the request
func (a *QueuesAPIService) DeleteQueueJobExecute(r ApiDeleteQueueJobRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueuesAPIService.DeleteQueueJob")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/queues/{queue_name}/jobs/{queue_job_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queue_name"+"}", url.PathEscape(parameterValueToString(r.queueName, "queueName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queue_job_id"+"}", url.PathEscape(parameterValueToString(r.queueJobId, "queueJobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.queueName) < 2 {
		return nil, reportError("queueName must have at least 2 elements")
	}
	if strlen(r.queueName) > 63 {
		return nil, reportError("queueName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		var v ProblemDetails
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetQueueRequest struct {
	ctx              context.Context
	ApiService       *QueuesAPIService
	organizationName string
	projectName      string
	queueName        string
}

func (r ApiGetQueueRequest) Execute() (*Queue, *http.Response, error) {
	return r.ApiService.GetQueueExecute(r)
}

/*
GetQueue Get Queue

Gets an existing queue in the given project.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param organizationName Your organization name. This identifies the billing context for the API operation and represents a security boundary for SaladCloud resources. The organization must be created before using the API, and you must be a member of the organization.
	@param projectName Your project name. This represents a collection of related SaladCloud resources. The project must be created before using the API.
	@param queueName The queue name.
	@return ApiGetQueueRequest
*/
func (a *QueuesAPIService) GetQueue(ctx context.Context, organizationName string, projectName string, queueName string) ApiGetQueueRequest {
	return ApiGetQueueRequest{
		ApiService:       a,
		ctx:              ctx,
		organizationName: organizationName,
		projectName:      projectName,
		queueName:        queueName,
	}
}

// Execute executes the request
//
//	@return Queue
func (a *QueuesAPIService) GetQueueExecute(r ApiGetQueueRequest) (*Queue, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Queue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueuesAPIService.GetQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/queues/{queue_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queue_name"+"}", url.PathEscape(parameterValueToString(r.queueName, "queueName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.queueName) < 2 {
		return localVarReturnValue, nil, reportError("queueName must have at least 2 elements")
	}
	if strlen(r.queueName) > 63 {
		return localVarReturnValue, nil, reportError("queueName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		var v ProblemDetails
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetQueueJobRequest struct {
	ctx              context.Context
	ApiService       *QueuesAPIService
	organizationName string
	projectName      string
	queueName        string
	queueJobId       string
}

func (r ApiGetQueueJobRequest) Execute() (*QueueJob, *http.Response, error) {
	return r.ApiService.GetQueueJobExecute(r)
}

/*
GetQueueJob Get Job

Gets a job in a queue

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param organizationName Your organization name. This identifies the billing context for the API operation and represents a security boundary for SaladCloud resources. The organization must be created before using the API, and you must be a member of the organization.
	@param projectName Your project name. This represents a collection of related SaladCloud resources. The project must be created before using the API.
	@param queueName The queue name.
	@param queueJobId The job identifier. This is automatically generated and assigned when the job is created.
	@return ApiGetQueueJobRequest
*/
func (a *QueuesAPIService) GetQueueJob(ctx context.Context, organizationName string, projectName string, queueName string, queueJobId string) ApiGetQueueJobRequest {
	return ApiGetQueueJobRequest{
		ApiService:       a,
		ctx:              ctx,
		organizationName: organizationName,
		projectName:      projectName,
		queueName:        queueName,
		queueJobId:       queueJobId,
	}
}

// Execute executes the request
//
//	@return QueueJob
func (a *QueuesAPIService) GetQueueJobExecute(r ApiGetQueueJobRequest) (*QueueJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *QueueJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueuesAPIService.GetQueueJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/queues/{queue_name}/jobs/{queue_job_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queue_name"+"}", url.PathEscape(parameterValueToString(r.queueName, "queueName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queue_job_id"+"}", url.PathEscape(parameterValueToString(r.queueJobId, "queueJobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.queueName) < 2 {
		return localVarReturnValue, nil, reportError("queueName must have at least 2 elements")
	}
	if strlen(r.queueName) > 63 {
		return localVarReturnValue, nil, reportError("queueName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		var v ProblemDetails
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListQueueJobsRequest struct {
	ctx              context.Context
	ApiService       *QueuesAPIService
	organizationName string
	projectName      string
	queueName        string
	page             *int32
	pageSize         *int32
}

// The page number
func (r ApiListQueueJobsRequest) Page(page int32) ApiListQueueJobsRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ApiListQueueJobsRequest) PageSize(pageSize int32) ApiListQueueJobsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListQueueJobsRequest) Execute() (*QueueJobList, *http.Response, error) {
	return r.ApiService.ListQueueJobsExecute(r)
}

/*
ListQueueJobs List Jobs

Gets the list of jobs in a queue

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param organizationName Your organization name. This identifies the billing context for the API operation and represents a security boundary for SaladCloud resources. The organization must be created before using the API, and you must be a member of the organization.
	@param projectName Your project name. This represents a collection of related SaladCloud resources. The project must be created before using the API.
	@param queueName The queue name.
	@return ApiListQueueJobsRequest
*/
func (a *QueuesAPIService) ListQueueJobs(ctx context.Context, organizationName string, projectName string, queueName string) ApiListQueueJobsRequest {
	return ApiListQueueJobsRequest{
		ApiService:       a,
		ctx:              ctx,
		organizationName: organizationName,
		projectName:      projectName,
		queueName:        queueName,
	}
}

// Execute executes the request
//
//	@return QueueJobList
func (a *QueuesAPIService) ListQueueJobsExecute(r ApiListQueueJobsRequest) (*QueueJobList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *QueueJobList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueuesAPIService.ListQueueJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/queues/{queue_name}/jobs"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queue_name"+"}", url.PathEscape(parameterValueToString(r.queueName, "queueName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.queueName) < 2 {
		return localVarReturnValue, nil, reportError("queueName must have at least 2 elements")
	}
	if strlen(r.queueName) > 63 {
		return localVarReturnValue, nil, reportError("queueName must have less than 63 elements")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		var v ProblemDetails
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListQueuesRequest struct {
	ctx              context.Context
	ApiService       *QueuesAPIService
	organizationName string
	projectName      string
}

func (r ApiListQueuesRequest) Execute() (*QueueList, *http.Response, error) {
	return r.ApiService.ListQueuesExecute(r)
}

/*
ListQueues List Queues

Gets the list of queues in the given project.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param organizationName Your organization name. This identifies the billing context for the API operation and represents a security boundary for SaladCloud resources. The organization must be created before using the API, and you must be a member of the organization.
	@param projectName Your project name. This represents a collection of related SaladCloud resources. The project must be created before using the API.
	@return ApiListQueuesRequest
*/
func (a *QueuesAPIService) ListQueues(ctx context.Context, organizationName string, projectName string) ApiListQueuesRequest {
	return ApiListQueuesRequest{
		ApiService:       a,
		ctx:              ctx,
		organizationName: organizationName,
		projectName:      projectName,
	}
}

// Execute executes the request
//
//	@return QueueList
func (a *QueuesAPIService) ListQueuesExecute(r ApiListQueuesRequest) (*QueueList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *QueueList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueuesAPIService.ListQueues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/queues"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		var v ProblemDetails
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateQueueRequest struct {
	ctx              context.Context
	ApiService       *QueuesAPIService
	organizationName string
	projectName      string
	queueName        string
	updateQueue      *UpdateQueue
}

func (r ApiUpdateQueueRequest) UpdateQueue(updateQueue UpdateQueue) ApiUpdateQueueRequest {
	r.updateQueue = &updateQueue
	return r
}

func (r ApiUpdateQueueRequest) Execute() (*Queue, *http.Response, error) {
	return r.ApiService.UpdateQueueExecute(r)
}

/*
UpdateQueue Update Queue

Updates an existing queue in the given project.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param organizationName Your organization name. This identifies the billing context for the API operation and represents a security boundary for SaladCloud resources. The organization must be created before using the API, and you must be a member of the organization.
	@param projectName Your project name. This represents a collection of related SaladCloud resources. The project must be created before using the API.
	@param queueName The queue name.
	@return ApiUpdateQueueRequest
*/
func (a *QueuesAPIService) UpdateQueue(ctx context.Context, organizationName string, projectName string, queueName string) ApiUpdateQueueRequest {
	return ApiUpdateQueueRequest{
		ApiService:       a,
		ctx:              ctx,
		organizationName: organizationName,
		projectName:      projectName,
		queueName:        queueName,
	}
}

// Execute executes the request
//
//	@return Queue
func (a *QueuesAPIService) UpdateQueueExecute(r ApiUpdateQueueRequest) (*Queue, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Queue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueuesAPIService.UpdateQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/queues/{queue_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queue_name"+"}", url.PathEscape(parameterValueToString(r.queueName, "queueName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.queueName) < 2 {
		return localVarReturnValue, nil, reportError("queueName must have at least 2 elements")
	}
	if strlen(r.queueName) > 63 {
		return localVarReturnValue, nil, reportError("queueName must have less than 63 elements")
	}
	if r.updateQueue == nil {
		return localVarReturnValue, nil, reportError("updateQueue is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateQueue
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		var v ProblemDetails
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
