/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.5
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
)

// checks if the UpdateContainerGroupNetworking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateContainerGroupNetworking{}

// UpdateContainerGroupNetworking Represents update container group networking parameters
type UpdateContainerGroupNetworking struct {
	Port NullableInt32 `json:"port,omitempty"`
}

// NewUpdateContainerGroupNetworking instantiates a new UpdateContainerGroupNetworking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateContainerGroupNetworking() *UpdateContainerGroupNetworking {
	this := UpdateContainerGroupNetworking{}
	return &this
}

// NewUpdateContainerGroupNetworkingWithDefaults instantiates a new UpdateContainerGroupNetworking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateContainerGroupNetworkingWithDefaults() *UpdateContainerGroupNetworking {
	this := UpdateContainerGroupNetworking{}
	return &this
}

// GetPort returns the Port field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateContainerGroupNetworking) GetPort() int32 {
	if o == nil || IsNil(o.Port.Get()) {
		var ret int32
		return ret
	}
	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateContainerGroupNetworking) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// HasPort returns a boolean if a field has been set.
func (o *UpdateContainerGroupNetworking) HasPort() bool {
	if o != nil && o.Port.IsSet() {
		return true
	}

	return false
}

// SetPort gets a reference to the given NullableInt32 and assigns it to the Port field.
func (o *UpdateContainerGroupNetworking) SetPort(v int32) {
	o.Port.Set(&v)
}

// SetPortNil sets the value for Port to be an explicit nil
func (o *UpdateContainerGroupNetworking) SetPortNil() {
	o.Port.Set(nil)
}

// UnsetPort ensures that no value is present for Port, not even an explicit nil
func (o *UpdateContainerGroupNetworking) UnsetPort() {
	o.Port.Unset()
}

func (o UpdateContainerGroupNetworking) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateContainerGroupNetworking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Port.IsSet() {
		toSerialize["port"] = o.Port.Get()
	}
	return toSerialize, nil
}

type NullableUpdateContainerGroupNetworking struct {
	value *UpdateContainerGroupNetworking
	isSet bool
}

func (v NullableUpdateContainerGroupNetworking) Get() *UpdateContainerGroupNetworking {
	return v.value
}

func (v *NullableUpdateContainerGroupNetworking) Set(val *UpdateContainerGroupNetworking) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateContainerGroupNetworking) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateContainerGroupNetworking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateContainerGroupNetworking(val *UpdateContainerGroupNetworking) *NullableUpdateContainerGroupNetworking {
	return &NullableUpdateContainerGroupNetworking{value: val, isSet: true}
}

func (v NullableUpdateContainerGroupNetworking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateContainerGroupNetworking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
