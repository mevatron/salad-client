/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.5
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ContainerLoggingHttp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerLoggingHttp{}

// ContainerLoggingHttp struct for ContainerLoggingHttp
type ContainerLoggingHttp struct {
	Host        string             `json:"host"`
	Port        int32              `json:"port"`
	User        NullableString     `json:"user,omitempty"`
	Password    NullableString     `json:"password,omitempty"`
	Path        NullableString     `json:"path,omitempty"`
	Format      string             `json:"format"`
	Headers     []HttpHeadersInner `json:"headers,omitempty"`
	Compression string             `json:"compression"`
}

type _ContainerLoggingHttp ContainerLoggingHttp

// NewContainerLoggingHttp instantiates a new ContainerLoggingHttp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerLoggingHttp(host string, port int32, format string, compression string) *ContainerLoggingHttp {
	this := ContainerLoggingHttp{}
	this.Host = host
	this.Port = port
	this.Format = format
	this.Compression = compression
	return &this
}

// NewContainerLoggingHttpWithDefaults instantiates a new ContainerLoggingHttp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerLoggingHttpWithDefaults() *ContainerLoggingHttp {
	this := ContainerLoggingHttp{}
	return &this
}

// GetHost returns the Host field value
func (o *ContainerLoggingHttp) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *ContainerLoggingHttp) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *ContainerLoggingHttp) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *ContainerLoggingHttp) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *ContainerLoggingHttp) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *ContainerLoggingHttp) SetPort(v int32) {
	o.Port = v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerLoggingHttp) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerLoggingHttp) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *ContainerLoggingHttp) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *ContainerLoggingHttp) SetUser(v string) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *ContainerLoggingHttp) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *ContainerLoggingHttp) UnsetUser() {
	o.User.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerLoggingHttp) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerLoggingHttp) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *ContainerLoggingHttp) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *ContainerLoggingHttp) SetPassword(v string) {
	o.Password.Set(&v)
}

// SetPasswordNil sets the value for Password to be an explicit nil
func (o *ContainerLoggingHttp) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *ContainerLoggingHttp) UnsetPassword() {
	o.Password.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerLoggingHttp) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerLoggingHttp) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *ContainerLoggingHttp) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *ContainerLoggingHttp) SetPath(v string) {
	o.Path.Set(&v)
}

// SetPathNil sets the value for Path to be an explicit nil
func (o *ContainerLoggingHttp) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *ContainerLoggingHttp) UnsetPath() {
	o.Path.Unset()
}

// GetFormat returns the Format field value
func (o *ContainerLoggingHttp) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *ContainerLoggingHttp) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *ContainerLoggingHttp) SetFormat(v string) {
	o.Format = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerLoggingHttp) GetHeaders() []HttpHeadersInner {
	if o == nil {
		var ret []HttpHeadersInner
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerLoggingHttp) GetHeadersOk() ([]HttpHeadersInner, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ContainerLoggingHttp) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []HttpHeadersInner and assigns it to the Headers field.
func (o *ContainerLoggingHttp) SetHeaders(v []HttpHeadersInner) {
	o.Headers = v
}

// GetCompression returns the Compression field value
func (o *ContainerLoggingHttp) GetCompression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value
// and a boolean to check if the value has been set.
func (o *ContainerLoggingHttp) GetCompressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compression, true
}

// SetCompression sets field value
func (o *ContainerLoggingHttp) SetCompression(v string) {
	o.Compression = v
}

func (o ContainerLoggingHttp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerLoggingHttp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	toSerialize["format"] = o.Format
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	toSerialize["compression"] = o.Compression
	return toSerialize, nil
}

func (o *ContainerLoggingHttp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"port",
		"format",
		"compression",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainerLoggingHttp := _ContainerLoggingHttp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContainerLoggingHttp)

	if err != nil {
		return err
	}

	*o = ContainerLoggingHttp(varContainerLoggingHttp)

	return err
}

type NullableContainerLoggingHttp struct {
	value *ContainerLoggingHttp
	isSet bool
}

func (v NullableContainerLoggingHttp) Get() *ContainerLoggingHttp {
	return v.value
}

func (v *NullableContainerLoggingHttp) Set(val *ContainerLoggingHttp) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerLoggingHttp) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerLoggingHttp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerLoggingHttp(val *ContainerLoggingHttp) *NullableContainerLoggingHttp {
	return &NullableContainerLoggingHttp{value: val, isSet: true}
}

func (v NullableContainerLoggingHttp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerLoggingHttp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
