/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.5
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the WorkloadError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadError{}

// WorkloadError Represents a workload error
type WorkloadError struct {
	Detail      string       `json:"detail"`
	FailedAt    time.Time    `json:"failed_at"`
	InstanceId  string       `json:"instance_id"`
	MachineId   string       `json:"machine_id"`
	AllocatedAt time.Time    `json:"allocated_at"`
	StartedAt   NullableTime `json:"started_at,omitempty"`
	Version     int32        `json:"version"`
}

type _WorkloadError WorkloadError

// NewWorkloadError instantiates a new WorkloadError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadError(detail string, failedAt time.Time, instanceId string, machineId string, allocatedAt time.Time, version int32) *WorkloadError {
	this := WorkloadError{}
	this.Detail = detail
	this.FailedAt = failedAt
	this.InstanceId = instanceId
	this.MachineId = machineId
	this.AllocatedAt = allocatedAt
	this.Version = version
	return &this
}

// NewWorkloadErrorWithDefaults instantiates a new WorkloadError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadErrorWithDefaults() *WorkloadError {
	this := WorkloadError{}
	return &this
}

// GetDetail returns the Detail field value
func (o *WorkloadError) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *WorkloadError) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *WorkloadError) SetDetail(v string) {
	o.Detail = v
}

// GetFailedAt returns the FailedAt field value
func (o *WorkloadError) GetFailedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FailedAt
}

// GetFailedAtOk returns a tuple with the FailedAt field value
// and a boolean to check if the value has been set.
func (o *WorkloadError) GetFailedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedAt, true
}

// SetFailedAt sets field value
func (o *WorkloadError) SetFailedAt(v time.Time) {
	o.FailedAt = v
}

// GetInstanceId returns the InstanceId field value
func (o *WorkloadError) GetInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *WorkloadError) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *WorkloadError) SetInstanceId(v string) {
	o.InstanceId = v
}

// GetMachineId returns the MachineId field value
func (o *WorkloadError) GetMachineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MachineId
}

// GetMachineIdOk returns a tuple with the MachineId field value
// and a boolean to check if the value has been set.
func (o *WorkloadError) GetMachineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MachineId, true
}

// SetMachineId sets field value
func (o *WorkloadError) SetMachineId(v string) {
	o.MachineId = v
}

// GetAllocatedAt returns the AllocatedAt field value
func (o *WorkloadError) GetAllocatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.AllocatedAt
}

// GetAllocatedAtOk returns a tuple with the AllocatedAt field value
// and a boolean to check if the value has been set.
func (o *WorkloadError) GetAllocatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedAt, true
}

// SetAllocatedAt sets field value
func (o *WorkloadError) SetAllocatedAt(v time.Time) {
	o.AllocatedAt = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadError) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt.Get()
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadError) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAt.Get(), o.StartedAt.IsSet()
}

// HasStartedAt returns a boolean if a field has been set.
func (o *WorkloadError) HasStartedAt() bool {
	if o != nil && o.StartedAt.IsSet() {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given NullableTime and assigns it to the StartedAt field.
func (o *WorkloadError) SetStartedAt(v time.Time) {
	o.StartedAt.Set(&v)
}

// SetStartedAtNil sets the value for StartedAt to be an explicit nil
func (o *WorkloadError) SetStartedAtNil() {
	o.StartedAt.Set(nil)
}

// UnsetStartedAt ensures that no value is present for StartedAt, not even an explicit nil
func (o *WorkloadError) UnsetStartedAt() {
	o.StartedAt.Unset()
}

// GetVersion returns the Version field value
func (o *WorkloadError) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *WorkloadError) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *WorkloadError) SetVersion(v int32) {
	o.Version = v
}

func (o WorkloadError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["detail"] = o.Detail
	toSerialize["failed_at"] = o.FailedAt
	toSerialize["instance_id"] = o.InstanceId
	toSerialize["machine_id"] = o.MachineId
	toSerialize["allocated_at"] = o.AllocatedAt
	if o.StartedAt.IsSet() {
		toSerialize["started_at"] = o.StartedAt.Get()
	}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *WorkloadError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"detail",
		"failed_at",
		"instance_id",
		"machine_id",
		"allocated_at",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkloadError := _WorkloadError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkloadError)

	if err != nil {
		return err
	}

	*o = WorkloadError(varWorkloadError)

	return err
}

type NullableWorkloadError struct {
	value *WorkloadError
	isSet bool
}

func (v NullableWorkloadError) Get() *WorkloadError {
	return v.value
}

func (v *NullableWorkloadError) Set(val *WorkloadError) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadError) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadError(val *WorkloadError) *NullableWorkloadError {
	return &NullableWorkloadError{value: val, isSet: true}
}

func (v NullableWorkloadError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
