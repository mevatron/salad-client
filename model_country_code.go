/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.5
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"fmt"
)

// CountryCode the model 'CountryCode'
type CountryCode string

// List of CountryCode
const (
	COUNTRYCODE_AF CountryCode = "af"
	COUNTRYCODE_AL CountryCode = "al"
	COUNTRYCODE_DZ CountryCode = "dz"
	COUNTRYCODE_AS CountryCode = "as"
	COUNTRYCODE_AD CountryCode = "ad"
	COUNTRYCODE_AO CountryCode = "ao"
	COUNTRYCODE_AI CountryCode = "ai"
	COUNTRYCODE_AQ CountryCode = "aq"
	COUNTRYCODE_AG CountryCode = "ag"
	COUNTRYCODE_AR CountryCode = "ar"
	COUNTRYCODE_AM CountryCode = "am"
	COUNTRYCODE_AW CountryCode = "aw"
	COUNTRYCODE_AU CountryCode = "au"
	COUNTRYCODE_AT CountryCode = "at"
	COUNTRYCODE_AZ CountryCode = "az"
	COUNTRYCODE_BS CountryCode = "bs"
	COUNTRYCODE_BH CountryCode = "bh"
	COUNTRYCODE_BD CountryCode = "bd"
	COUNTRYCODE_BB CountryCode = "bb"
	COUNTRYCODE_BY CountryCode = "by"
	COUNTRYCODE_BE CountryCode = "be"
	COUNTRYCODE_BZ CountryCode = "bz"
	COUNTRYCODE_BJ CountryCode = "bj"
	COUNTRYCODE_BM CountryCode = "bm"
	COUNTRYCODE_BT CountryCode = "bt"
	COUNTRYCODE_BO CountryCode = "bo"
	COUNTRYCODE_BQ CountryCode = "bq"
	COUNTRYCODE_BA CountryCode = "ba"
	COUNTRYCODE_BW CountryCode = "bw"
	COUNTRYCODE_BV CountryCode = "bv"
	COUNTRYCODE_BR CountryCode = "br"
	COUNTRYCODE_IO CountryCode = "io"
	COUNTRYCODE_BN CountryCode = "bn"
	COUNTRYCODE_BG CountryCode = "bg"
	COUNTRYCODE_BF CountryCode = "bf"
	COUNTRYCODE_BI CountryCode = "bi"
	COUNTRYCODE_CV CountryCode = "cv"
	COUNTRYCODE_KH CountryCode = "kh"
	COUNTRYCODE_CM CountryCode = "cm"
	COUNTRYCODE_CA CountryCode = "ca"
	COUNTRYCODE_KY CountryCode = "ky"
	COUNTRYCODE_CF CountryCode = "cf"
	COUNTRYCODE_TD CountryCode = "td"
	COUNTRYCODE_CL CountryCode = "cl"
	COUNTRYCODE_CN CountryCode = "cn"
	COUNTRYCODE_CX CountryCode = "cx"
	COUNTRYCODE_CC CountryCode = "cc"
	COUNTRYCODE_CO CountryCode = "co"
	COUNTRYCODE_KM CountryCode = "km"
	COUNTRYCODE_CD CountryCode = "cd"
	COUNTRYCODE_CG CountryCode = "cg"
	COUNTRYCODE_CK CountryCode = "ck"
	COUNTRYCODE_CR CountryCode = "cr"
	COUNTRYCODE_HR CountryCode = "hr"
	COUNTRYCODE_CU CountryCode = "cu"
	COUNTRYCODE_CW CountryCode = "cw"
	COUNTRYCODE_CY CountryCode = "cy"
	COUNTRYCODE_CZ CountryCode = "cz"
	COUNTRYCODE_CI CountryCode = "ci"
	COUNTRYCODE_DK CountryCode = "dk"
	COUNTRYCODE_DJ CountryCode = "dj"
	COUNTRYCODE_DM CountryCode = "dm"
	COUNTRYCODE_DO CountryCode = "do"
	COUNTRYCODE_EC CountryCode = "ec"
	COUNTRYCODE_EG CountryCode = "eg"
	COUNTRYCODE_SV CountryCode = "sv"
	COUNTRYCODE_GQ CountryCode = "gq"
	COUNTRYCODE_ER CountryCode = "er"
	COUNTRYCODE_EE CountryCode = "ee"
	COUNTRYCODE_SZ CountryCode = "sz"
	COUNTRYCODE_ET CountryCode = "et"
	COUNTRYCODE_FK CountryCode = "fk"
	COUNTRYCODE_FO CountryCode = "fo"
	COUNTRYCODE_FJ CountryCode = "fj"
	COUNTRYCODE_FI CountryCode = "fi"
	COUNTRYCODE_FR CountryCode = "fr"
	COUNTRYCODE_GF CountryCode = "gf"
	COUNTRYCODE_PF CountryCode = "pf"
	COUNTRYCODE_TF CountryCode = "tf"
	COUNTRYCODE_GA CountryCode = "ga"
	COUNTRYCODE_GM CountryCode = "gm"
	COUNTRYCODE_GE CountryCode = "ge"
	COUNTRYCODE_DE CountryCode = "de"
	COUNTRYCODE_GH CountryCode = "gh"
	COUNTRYCODE_GI CountryCode = "gi"
	COUNTRYCODE_GR CountryCode = "gr"
	COUNTRYCODE_GL CountryCode = "gl"
	COUNTRYCODE_GD CountryCode = "gd"
	COUNTRYCODE_GP CountryCode = "gp"
	COUNTRYCODE_GU CountryCode = "gu"
	COUNTRYCODE_GT CountryCode = "gt"
	COUNTRYCODE_GG CountryCode = "gg"
	COUNTRYCODE_GN CountryCode = "gn"
	COUNTRYCODE_GW CountryCode = "gw"
	COUNTRYCODE_GY CountryCode = "gy"
	COUNTRYCODE_HT CountryCode = "ht"
	COUNTRYCODE_HM CountryCode = "hm"
	COUNTRYCODE_VA CountryCode = "va"
	COUNTRYCODE_HN CountryCode = "hn"
	COUNTRYCODE_HK CountryCode = "hk"
	COUNTRYCODE_HU CountryCode = "hu"
	COUNTRYCODE_IS CountryCode = "is"
	COUNTRYCODE_IN CountryCode = "in"
	COUNTRYCODE_ID CountryCode = "id"
	COUNTRYCODE_IR CountryCode = "ir"
	COUNTRYCODE_IQ CountryCode = "iq"
	COUNTRYCODE_IE CountryCode = "ie"
	COUNTRYCODE_IM CountryCode = "im"
	COUNTRYCODE_IL CountryCode = "il"
	COUNTRYCODE_IT CountryCode = "it"
	COUNTRYCODE_JM CountryCode = "jm"
	COUNTRYCODE_JP CountryCode = "jp"
	COUNTRYCODE_JE CountryCode = "je"
	COUNTRYCODE_JO CountryCode = "jo"
	COUNTRYCODE_KZ CountryCode = "kz"
	COUNTRYCODE_KE CountryCode = "ke"
	COUNTRYCODE_KI CountryCode = "ki"
	COUNTRYCODE_KP CountryCode = "kp"
	COUNTRYCODE_KR CountryCode = "kr"
	COUNTRYCODE_KW CountryCode = "kw"
	COUNTRYCODE_KG CountryCode = "kg"
	COUNTRYCODE_LA CountryCode = "la"
	COUNTRYCODE_LV CountryCode = "lv"
	COUNTRYCODE_LB CountryCode = "lb"
	COUNTRYCODE_LS CountryCode = "ls"
	COUNTRYCODE_LR CountryCode = "lr"
	COUNTRYCODE_LY CountryCode = "ly"
	COUNTRYCODE_LI CountryCode = "li"
	COUNTRYCODE_LT CountryCode = "lt"
	COUNTRYCODE_LU CountryCode = "lu"
	COUNTRYCODE_MO CountryCode = "mo"
	COUNTRYCODE_MG CountryCode = "mg"
	COUNTRYCODE_MW CountryCode = "mw"
	COUNTRYCODE_MY CountryCode = "my"
	COUNTRYCODE_MV CountryCode = "mv"
	COUNTRYCODE_ML CountryCode = "ml"
	COUNTRYCODE_MT CountryCode = "mt"
	COUNTRYCODE_MH CountryCode = "mh"
	COUNTRYCODE_MQ CountryCode = "mq"
	COUNTRYCODE_MR CountryCode = "mr"
	COUNTRYCODE_MU CountryCode = "mu"
	COUNTRYCODE_YT CountryCode = "yt"
	COUNTRYCODE_MX CountryCode = "mx"
	COUNTRYCODE_FM CountryCode = "fm"
	COUNTRYCODE_MD CountryCode = "md"
	COUNTRYCODE_MC CountryCode = "mc"
	COUNTRYCODE_MN CountryCode = "mn"
	COUNTRYCODE_ME CountryCode = "me"
	COUNTRYCODE_MS CountryCode = "ms"
	COUNTRYCODE_MA CountryCode = "ma"
	COUNTRYCODE_MZ CountryCode = "mz"
	COUNTRYCODE_MM CountryCode = "mm"
	COUNTRYCODE_NA CountryCode = "na"
	COUNTRYCODE_NR CountryCode = "nr"
	COUNTRYCODE_NP CountryCode = "np"
	COUNTRYCODE_NL CountryCode = "nl"
	COUNTRYCODE_NC CountryCode = "nc"
	COUNTRYCODE_NZ CountryCode = "nz"
	COUNTRYCODE_NI CountryCode = "ni"
	COUNTRYCODE_NE CountryCode = "ne"
	COUNTRYCODE_NG CountryCode = "ng"
	COUNTRYCODE_NU CountryCode = "nu"
	COUNTRYCODE_NF CountryCode = "nf"
	COUNTRYCODE_MP CountryCode = "mp"
	COUNTRYCODE_NO CountryCode = "no"
	COUNTRYCODE_OM CountryCode = "om"
	COUNTRYCODE_PK CountryCode = "pk"
	COUNTRYCODE_PW CountryCode = "pw"
	COUNTRYCODE_PS CountryCode = "ps"
	COUNTRYCODE_PA CountryCode = "pa"
	COUNTRYCODE_PG CountryCode = "pg"
	COUNTRYCODE_PY CountryCode = "py"
	COUNTRYCODE_PE CountryCode = "pe"
	COUNTRYCODE_PH CountryCode = "ph"
	COUNTRYCODE_PN CountryCode = "pn"
	COUNTRYCODE_PL CountryCode = "pl"
	COUNTRYCODE_PT CountryCode = "pt"
	COUNTRYCODE_PR CountryCode = "pr"
	COUNTRYCODE_QA CountryCode = "qa"
	COUNTRYCODE_MK CountryCode = "mk"
	COUNTRYCODE_RO CountryCode = "ro"
	COUNTRYCODE_RU CountryCode = "ru"
	COUNTRYCODE_RW CountryCode = "rw"
	COUNTRYCODE_RE CountryCode = "re"
	COUNTRYCODE_BL CountryCode = "bl"
	COUNTRYCODE_SH CountryCode = "sh"
	COUNTRYCODE_KN CountryCode = "kn"
	COUNTRYCODE_LC CountryCode = "lc"
	COUNTRYCODE_MF CountryCode = "mf"
	COUNTRYCODE_PM CountryCode = "pm"
	COUNTRYCODE_VC CountryCode = "vc"
	COUNTRYCODE_WS CountryCode = "ws"
	COUNTRYCODE_SM CountryCode = "sm"
	COUNTRYCODE_ST CountryCode = "st"
	COUNTRYCODE_SA CountryCode = "sa"
	COUNTRYCODE_SN CountryCode = "sn"
	COUNTRYCODE_RS CountryCode = "rs"
	COUNTRYCODE_SC CountryCode = "sc"
	COUNTRYCODE_SL CountryCode = "sl"
	COUNTRYCODE_SG CountryCode = "sg"
	COUNTRYCODE_SX CountryCode = "sx"
	COUNTRYCODE_SK CountryCode = "sk"
	COUNTRYCODE_SI CountryCode = "si"
	COUNTRYCODE_SB CountryCode = "sb"
	COUNTRYCODE_SO CountryCode = "so"
	COUNTRYCODE_ZA CountryCode = "za"
	COUNTRYCODE_GS CountryCode = "gs"
	COUNTRYCODE_SS CountryCode = "ss"
	COUNTRYCODE_ES CountryCode = "es"
	COUNTRYCODE_LK CountryCode = "lk"
	COUNTRYCODE_SD CountryCode = "sd"
	COUNTRYCODE_SR CountryCode = "sr"
	COUNTRYCODE_SJ CountryCode = "sj"
	COUNTRYCODE_SE CountryCode = "se"
	COUNTRYCODE_CH CountryCode = "ch"
	COUNTRYCODE_SY CountryCode = "sy"
	COUNTRYCODE_TW CountryCode = "tw"
	COUNTRYCODE_TJ CountryCode = "tj"
	COUNTRYCODE_TZ CountryCode = "tz"
	COUNTRYCODE_TH CountryCode = "th"
	COUNTRYCODE_TL CountryCode = "tl"
	COUNTRYCODE_TG CountryCode = "tg"
	COUNTRYCODE_TK CountryCode = "tk"
	COUNTRYCODE_TO CountryCode = "to"
	COUNTRYCODE_TT CountryCode = "tt"
	COUNTRYCODE_TN CountryCode = "tn"
	COUNTRYCODE_TR CountryCode = "tr"
	COUNTRYCODE_TM CountryCode = "tm"
	COUNTRYCODE_TC CountryCode = "tc"
	COUNTRYCODE_TV CountryCode = "tv"
	COUNTRYCODE_UG CountryCode = "ug"
	COUNTRYCODE_UA CountryCode = "ua"
	COUNTRYCODE_AE CountryCode = "ae"
	COUNTRYCODE_GB CountryCode = "gb"
	COUNTRYCODE_UM CountryCode = "um"
	COUNTRYCODE_US CountryCode = "us"
	COUNTRYCODE_UY CountryCode = "uy"
	COUNTRYCODE_UZ CountryCode = "uz"
	COUNTRYCODE_VU CountryCode = "vu"
	COUNTRYCODE_VE CountryCode = "ve"
	COUNTRYCODE_VN CountryCode = "vn"
	COUNTRYCODE_VG CountryCode = "vg"
	COUNTRYCODE_VI CountryCode = "vi"
	COUNTRYCODE_WF CountryCode = "wf"
	COUNTRYCODE_EH CountryCode = "eh"
	COUNTRYCODE_YE CountryCode = "ye"
	COUNTRYCODE_ZM CountryCode = "zm"
	COUNTRYCODE_ZW CountryCode = "zw"
	COUNTRYCODE_AX CountryCode = "ax"
)

// All allowed values of CountryCode enum
var AllowedCountryCodeEnumValues = []CountryCode{
	"af",
	"al",
	"dz",
	"as",
	"ad",
	"ao",
	"ai",
	"aq",
	"ag",
	"ar",
	"am",
	"aw",
	"au",
	"at",
	"az",
	"bs",
	"bh",
	"bd",
	"bb",
	"by",
	"be",
	"bz",
	"bj",
	"bm",
	"bt",
	"bo",
	"bq",
	"ba",
	"bw",
	"bv",
	"br",
	"io",
	"bn",
	"bg",
	"bf",
	"bi",
	"cv",
	"kh",
	"cm",
	"ca",
	"ky",
	"cf",
	"td",
	"cl",
	"cn",
	"cx",
	"cc",
	"co",
	"km",
	"cd",
	"cg",
	"ck",
	"cr",
	"hr",
	"cu",
	"cw",
	"cy",
	"cz",
	"ci",
	"dk",
	"dj",
	"dm",
	"do",
	"ec",
	"eg",
	"sv",
	"gq",
	"er",
	"ee",
	"sz",
	"et",
	"fk",
	"fo",
	"fj",
	"fi",
	"fr",
	"gf",
	"pf",
	"tf",
	"ga",
	"gm",
	"ge",
	"de",
	"gh",
	"gi",
	"gr",
	"gl",
	"gd",
	"gp",
	"gu",
	"gt",
	"gg",
	"gn",
	"gw",
	"gy",
	"ht",
	"hm",
	"va",
	"hn",
	"hk",
	"hu",
	"is",
	"in",
	"id",
	"ir",
	"iq",
	"ie",
	"im",
	"il",
	"it",
	"jm",
	"jp",
	"je",
	"jo",
	"kz",
	"ke",
	"ki",
	"kp",
	"kr",
	"kw",
	"kg",
	"la",
	"lv",
	"lb",
	"ls",
	"lr",
	"ly",
	"li",
	"lt",
	"lu",
	"mo",
	"mg",
	"mw",
	"my",
	"mv",
	"ml",
	"mt",
	"mh",
	"mq",
	"mr",
	"mu",
	"yt",
	"mx",
	"fm",
	"md",
	"mc",
	"mn",
	"me",
	"ms",
	"ma",
	"mz",
	"mm",
	"na",
	"nr",
	"np",
	"nl",
	"nc",
	"nz",
	"ni",
	"ne",
	"ng",
	"nu",
	"nf",
	"mp",
	"no",
	"om",
	"pk",
	"pw",
	"ps",
	"pa",
	"pg",
	"py",
	"pe",
	"ph",
	"pn",
	"pl",
	"pt",
	"pr",
	"qa",
	"mk",
	"ro",
	"ru",
	"rw",
	"re",
	"bl",
	"sh",
	"kn",
	"lc",
	"mf",
	"pm",
	"vc",
	"ws",
	"sm",
	"st",
	"sa",
	"sn",
	"rs",
	"sc",
	"sl",
	"sg",
	"sx",
	"sk",
	"si",
	"sb",
	"so",
	"za",
	"gs",
	"ss",
	"es",
	"lk",
	"sd",
	"sr",
	"sj",
	"se",
	"ch",
	"sy",
	"tw",
	"tj",
	"tz",
	"th",
	"tl",
	"tg",
	"tk",
	"to",
	"tt",
	"tn",
	"tr",
	"tm",
	"tc",
	"tv",
	"ug",
	"ua",
	"ae",
	"gb",
	"um",
	"us",
	"uy",
	"uz",
	"vu",
	"ve",
	"vn",
	"vg",
	"vi",
	"wf",
	"eh",
	"ye",
	"zm",
	"zw",
	"ax",
}

func (v *CountryCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CountryCode(value)
	for _, existing := range AllowedCountryCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CountryCode", value)
}

// NewCountryCodeFromValue returns a pointer to a valid CountryCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCountryCodeFromValue(v string) (*CountryCode, error) {
	ev := CountryCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CountryCode: valid values are %v", v, AllowedCountryCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CountryCode) IsValid() bool {
	for _, existing := range AllowedCountryCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CountryCode value
func (v CountryCode) Ptr() *CountryCode {
	return &v
}

type NullableCountryCode struct {
	value *CountryCode
	isSet bool
}

func (v NullableCountryCode) Get() *CountryCode {
	return v.value
}

func (v *NullableCountryCode) Set(val *CountryCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryCode(val *CountryCode) *NullableCountryCode {
	return &NullableCountryCode{value: val, isSet: true}
}

func (v NullableCountryCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
