/*
SaladCloud API

Testing QueuesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package saladclient

import (
	"context"
	openapiclient "github.com/mevatron/salad-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_saladclient_QueuesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test QueuesAPIService CreateQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var projectName string

		resp, httpRes, err := apiClient.QueuesAPI.CreateQueue(context.Background(), organizationName, projectName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService CreateQueueJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var projectName string
		var queueName string

		resp, httpRes, err := apiClient.QueuesAPI.CreateQueueJob(context.Background(), organizationName, projectName, queueName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService DeleteQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var projectName string
		var queueName string

		httpRes, err := apiClient.QueuesAPI.DeleteQueue(context.Background(), organizationName, projectName, queueName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService DeleteQueueJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var projectName string
		var queueName string
		var queueJobId string

		httpRes, err := apiClient.QueuesAPI.DeleteQueueJob(context.Background(), organizationName, projectName, queueName, queueJobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService GetQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var projectName string
		var queueName string

		resp, httpRes, err := apiClient.QueuesAPI.GetQueue(context.Background(), organizationName, projectName, queueName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService GetQueueJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var projectName string
		var queueName string
		var queueJobId string

		resp, httpRes, err := apiClient.QueuesAPI.GetQueueJob(context.Background(), organizationName, projectName, queueName, queueJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService ListQueueJobs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var projectName string
		var queueName string

		resp, httpRes, err := apiClient.QueuesAPI.ListQueueJobs(context.Background(), organizationName, projectName, queueName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService ListQueues", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var projectName string

		resp, httpRes, err := apiClient.QueuesAPI.ListQueues(context.Background(), organizationName, projectName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService UpdateQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var projectName string
		var queueName string

		resp, httpRes, err := apiClient.QueuesAPI.UpdateQueue(context.Background(), organizationName, projectName, queueName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
