/*
SaladCloud API

Testing InferenceEndpointsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package saladclient

import (
	"context"
	openapiclient "github.com/mevatron/salad-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_saladclient_InferenceEndpointsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InferenceEndpointsAPIService CreateInferenceEndpointJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var inferenceEndpointName string

		resp, httpRes, err := apiClient.InferenceEndpointsAPI.CreateInferenceEndpointJob(context.Background(), organizationName, inferenceEndpointName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InferenceEndpointsAPIService DeleteInferenceEndpointJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var inferenceEndpointName string
		var inferenceEndpointJobId string

		httpRes, err := apiClient.InferenceEndpointsAPI.DeleteInferenceEndpointJob(context.Background(), organizationName, inferenceEndpointName, inferenceEndpointJobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InferenceEndpointsAPIService GetInferenceEndpoint", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var inferenceEndpointName string

		resp, httpRes, err := apiClient.InferenceEndpointsAPI.GetInferenceEndpoint(context.Background(), organizationName, inferenceEndpointName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InferenceEndpointsAPIService GetInferenceEndpointJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var inferenceEndpointName string
		var inferenceEndpointJobId string

		resp, httpRes, err := apiClient.InferenceEndpointsAPI.GetInferenceEndpointJob(context.Background(), organizationName, inferenceEndpointName, inferenceEndpointJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InferenceEndpointsAPIService GetInferenceEndpointJobs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string
		var inferenceEndpointName string

		resp, httpRes, err := apiClient.InferenceEndpointsAPI.GetInferenceEndpointJobs(context.Background(), organizationName, inferenceEndpointName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InferenceEndpointsAPIService ListInferenceEndpoints", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationName string

		resp, httpRes, err := apiClient.InferenceEndpointsAPI.ListInferenceEndpoints(context.Background(), organizationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
