/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.5
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the QueueList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueueList{}

// QueueList Represents a list of queues
type QueueList struct {
	// The list of queues.
	Items []Queue `json:"items"`
}

type _QueueList QueueList

// NewQueueList instantiates a new QueueList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueueList(items []Queue) *QueueList {
	this := QueueList{}
	this.Items = items
	return &this
}

// NewQueueListWithDefaults instantiates a new QueueList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueueListWithDefaults() *QueueList {
	this := QueueList{}
	return &this
}

// GetItems returns the Items field value
func (o *QueueList) GetItems() []Queue {
	if o == nil {
		var ret []Queue
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *QueueList) GetItemsOk() ([]Queue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *QueueList) SetItems(v []Queue) {
	o.Items = v
}

func (o QueueList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueueList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *QueueList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueueList := _QueueList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueueList)

	if err != nil {
		return err
	}

	*o = QueueList(varQueueList)

	return err
}

type NullableQueueList struct {
	value *QueueList
	isSet bool
}

func (v NullableQueueList) Get() *QueueList {
	return v.value
}

func (v *NullableQueueList) Set(val *QueueList) {
	v.value = val
	v.isSet = true
}

func (v NullableQueueList) IsSet() bool {
	return v.isSet
}

func (v *NullableQueueList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueueList(val *QueueList) *NullableQueueList {
	return &NullableQueueList{value: val, isSet: true}
}

func (v NullableQueueList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueueList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
